services:
  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "exit 0" ]
      interval: 10s
      timeout: 10s
      retries: 10

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      SA_PASSWORD: "SenhaForte123!@"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    networks:
      - backend
    volumes:
      - ./src/main/resources/products.sql:/docker-entrypoint-initdb.d/products.sql
      - sqlserver_data:/var/opt/mssql
    
    healthcheck:
      test: [ "CMD-SHELL", "exit 0" ]
      interval: 10s
      timeout: 10s
      retries: 10
    
    restart: always

  # sqlserver-init:
  #   image: mcr.microsoft.com/mssql-tools
  #   depends_on:
  #     - sqlserver
  #   entrypoint: /bin/bash -c "sleep 20 && /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P 'SenhaForte123!@' -d master -i /docker-entrypoint-initdb.d/products.sql"
  #   volumes:
  #     - ./src/main/resources/products.sql:/docker-entrypoint-initdb.d/products.sql
  #   networks:
  #     - backend

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: SenhaForte123!@
      POSTGRES_DB: hackdb
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "exit 0" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always

  hack-api:
    image: lhenriqu/hack-api:1.0
    container_name: hack-api
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

    ports:
      - "8080:8080"
    environment:
      POSTGRES_URL: jdbc:postgresql://postgres:5432/hackdb
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: SenhaForte123!@
      POSTGRES_DB_GENERATION: create-drop

      SQLSERVER_URL: jdbc:sqlserver://sqlserver:1433;databaseName=master;encrypt=false;trustServerCertificate=true
      SQLSERVER_USERNAME: sa
      SQLSERVER_PASSWORD: SenhaForte123!@
      
      REDIS_HOSTS: redis://redis:6379
      
      EVENTHUB_KEY: 

    networks:
      - backend
    restart: always

networks:
  backend:
    driver: bridge

volumes:
  sqlserver_data:
  postgres_data: